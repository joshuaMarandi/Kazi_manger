openapi: 3.0.0
info:
  title: Kazi Task Manager API
  description: API documentation for the Kazi Task Manager application
  version: 1.0.0
  contact:
    name: Joshua Marandi
servers:
  - url: http://localhost:5000
    description: Development server
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: securePassword123!
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
              required:
                - email
                - password
                - first_name
                - last_name
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login with existing credentials
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123!
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT authentication token
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/profile:
    get:
      summary: Get current user profile
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user profile
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: newSecurePassword123!
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      summary: Logout current user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tasks:
    get:
      summary: Get all tasks for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter tasks by status
          schema:
            type: string
            enum: [Pending, In Progress, Completed]
        - name: due_date
          in: query
          description: Filter tasks by due date
          schema:
            type: string
            format: date
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [title, due_date, status, created_at]
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  count:
                    type: integer
                    example: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Complete project documentation
                description:
                  type: string
                  example: Write all required documentation for the project
                status:
                  type: string
                  enum: [Pending, In Progress, Completed]
                  default: Pending
                  example: Pending
                due_date:
                  type: string
                  format: date
                  example: 2025-10-20
              required:
                - title
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tasks/stats:
    get:
      summary: Get task statistics for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Task statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTasks:
                    type: integer
                    example: 15
                  completedTasks:
                    type: integer
                    example: 5
                  pendingTasks:
                    type: integer
                    example: 7
                  inProgressTasks:
                    type: integer
                    example: 3
                  upcomingDueTasks:
                    type: integer
                    example: 2
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Task ID
        schema:
          type: integer
          format: int64
    get:
      summary: Get a specific task by ID
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a specific task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated task title
                description:
                  type: string
                  example: Updated task description
                status:
                  type: string
                  enum: [Pending, In Progress, Completed]
                  example: In Progress
                due_date:
                  type: string
                  format: date
                  example: 2025-10-25
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a specific task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        created_at:
          type: string
          format: date-time
          example: 2025-10-08T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-08T12:00:00Z

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Complete project documentation
        description:
          type: string
          example: Write all required documentation for the project
        status:
          type: string
          enum: [Pending, In Progress, Completed]
          example: Pending
        due_date:
          type: string
          format: date
          example: 2025-10-20
        user_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          example: 2025-10-08T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-08T12:00:00Z

    Error:
      type: object
      properties:
        error:
          type: string
          example: Error message details